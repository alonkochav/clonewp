{"ast":null,"code":"import axios from \"axios\";\n// Adjust the base URL according to your backend server's address\nconst BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:3000/api\";\n\n// Create an axios instance with a base URL\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add a response interceptor to handle global error handling\napi.interceptors.response.use(response => response, error => {\n  console.error(\"API Error:\", error);\n  return Promise.reject(error);\n});\nexport const postService = {\n  getAllPosts: async (page = 1, limit = 10) => {\n    const response = await api.get(\"/posts\", {\n      params: {\n        page,\n        limit\n      }\n    });\n    return response.data;\n  },\n  getPostById: async id => {\n    const response = await api.get(`/posts/${id}`);\n    return response.data;\n  },\n  createPost: async post => {\n    const response = await api.post(\"/posts\", post);\n    return response.data;\n  },\n  updatePost: async (id, post) => {\n    const response = await api.put(`/posts/${id}`, post);\n    return response.data;\n  },\n  deletePost: async id => {\n    await api.delete(`/posts/${id}`);\n  },\n  // Example for adding a comment to a post\n  addComment: async (postId, comment) => {\n    await api.post(`/posts/${postId}/comments`, comment);\n  }\n};\n\n/*\r\nNotes:\r\nEnvironment Variables: The BASE_URL uses an environment variable REACT_APP_API_URL. This should be set in your .env file for different environments.\r\nTyping: TypeScript interfaces (Post and PostResponse) are used to define the shape of the data. Adjust these according to your actual data structures.\r\nAxios: It's assumed that you've installed axios (npm install axios @types/axios). If not, you'll need to do so for this service to work.\r\nError Handling: Basic error logging is implemented via an axios response interceptor. In a production app, you might want more detailed error handling, perhaps dispatching error messages to a global state or showing notifications.\r\nPagination: The getAllPosts function includes pagination parameters. You can adjust this according to your backend's API structure.\r\nAuthentication: If your API requires authentication, you would typically add an authorization header to each request or use axios interceptors to add tokens:\r\n--\r\n*/\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n/*\r\n--\r\nService Usage: In your components or hooks, you would import this service and call these methods to interact with your backend:\r\n--\r\nimport postService from './services/postService';\r\n\r\nconst fetchPosts = async () => {\r\n    try {\r\n        const posts = await postService.getAllPosts();\r\n        // Handle posts\r\n    } catch (error) {\r\n        // Handle error\r\n    }\r\n};\r\n--\r\nRemember to handle the asynchronous nature of these calls properly, possibly using React's useEffect hook or custom hooks for fetching data.\r\n*/\n\nexport default postService;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","response","use","error","console","Promise","reject","postService","getAllPosts","page","limit","get","params","data","getPostById","id","createPost","post","updatePost","put","deletePost","delete","addComment","postId","comment","request","config","token","localStorage","getItem","Authorization"],"sources":["C:/Users/akrnuc/code/clonewp/clonewp/frontend/src/services/postService.tsx"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\ninterface Post {\r\n  id: number;\r\n  title: string;\r\n  content: string;\r\n  author_id: number;\r\n  category_id?: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface PostResponse {\r\n  data: Post[];\r\n  pagination?: { current_page: number; total_pages: number };\r\n}\r\n\r\n// Adjust the base URL according to your backend server's address\r\nconst BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:3000/api\";\r\n\r\n// Create an axios instance with a base URL\r\nconst api = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Add a response interceptor to handle global error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error(\"API Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const postService = {\r\n  getAllPosts: async (page = 1, limit = 10): Promise<PostResponse> => {\r\n    const response: AxiosResponse<PostResponse> = await api.get(\"/posts\", {\r\n      params: {\r\n        page,\r\n        limit,\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getPostById: async (id: number): Promise<Post> => {\r\n    const response: AxiosResponse<Post> = await api.get(`/posts/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createPost: async (\r\n    post: Omit<Post, \"id\" | \"created_at\" | \"updated_at\">\r\n  ): Promise<Post> => {\r\n    const response: AxiosResponse<Post> = await api.post(\"/posts\", post);\r\n    return response.data;\r\n  },\r\n\r\n  updatePost: async (id: number, post: Partial<Post>): Promise<Post> => {\r\n    const response: AxiosResponse<Post> = await api.put(`/posts/${id}`, post);\r\n    return response.data;\r\n  },\r\n\r\n  deletePost: async (id: number): Promise<void> => {\r\n    await api.delete(`/posts/${id}`);\r\n  },\r\n\r\n  // Example for adding a comment to a post\r\n  addComment: async (\r\n    postId: number,\r\n    comment: { content: string }\r\n  ): Promise<void> => {\r\n    await api.post(`/posts/${postId}/comments`, comment);\r\n  },\r\n};\r\n\r\n/*\r\nNotes:\r\nEnvironment Variables: The BASE_URL uses an environment variable REACT_APP_API_URL. This should be set in your .env file for different environments.\r\nTyping: TypeScript interfaces (Post and PostResponse) are used to define the shape of the data. Adjust these according to your actual data structures.\r\nAxios: It's assumed that you've installed axios (npm install axios @types/axios). If not, you'll need to do so for this service to work.\r\nError Handling: Basic error logging is implemented via an axios response interceptor. In a production app, you might want more detailed error handling, perhaps dispatching error messages to a global state or showing notifications.\r\nPagination: The getAllPosts function includes pagination parameters. You can adjust this according to your backend's API structure.\r\nAuthentication: If your API requires authentication, you would typically add an authorization header to each request or use axios interceptors to add tokens:\r\n--\r\n*/\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n/*\r\n--\r\nService Usage: In your components or hooks, you would import this service and call these methods to interact with your backend:\r\n--\r\nimport postService from './services/postService';\r\n\r\nconst fetchPosts = async () => {\r\n    try {\r\n        const posts = await postService.getAllPosts();\r\n        // Handle posts\r\n    } catch (error) {\r\n        // Handle error\r\n    }\r\n};\r\n--\r\nRemember to handle the asynchronous nature of these calls properly, possibly using React's useEffect hook or custom hooks for fetching data.\r\n*/\r\n\r\nexport default postService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;AAiB5C;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE7E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,QAAQ;EACjBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMI,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,KAA4B;IAClE,MAAMT,QAAqC,GAAG,MAAML,GAAG,CAACe,GAAG,CAAC,QAAQ,EAAE;MACpEC,MAAM,EAAE;QACNH,IAAI;QACJC;MACF;IACF,CAAC,CAAC;IACF,OAAOT,QAAQ,CAACY,IAAI;EACtB,CAAC;EAEDC,WAAW,EAAE,MAAOC,EAAU,IAAoB;IAChD,MAAMd,QAA6B,GAAG,MAAML,GAAG,CAACe,GAAG,CAAC,UAAUI,EAAE,EAAE,CAAC;IACnE,OAAOd,QAAQ,CAACY,IAAI;EACtB,CAAC;EAEDG,UAAU,EAAE,MACVC,IAAoD,IAClC;IAClB,MAAMhB,QAA6B,GAAG,MAAML,GAAG,CAACqB,IAAI,CAAC,QAAQ,EAAEA,IAAI,CAAC;IACpE,OAAOhB,QAAQ,CAACY,IAAI;EACtB,CAAC;EAEDK,UAAU,EAAE,MAAAA,CAAOH,EAAU,EAAEE,IAAmB,KAAoB;IACpE,MAAMhB,QAA6B,GAAG,MAAML,GAAG,CAACuB,GAAG,CAAC,UAAUJ,EAAE,EAAE,EAAEE,IAAI,CAAC;IACzE,OAAOhB,QAAQ,CAACY,IAAI;EACtB,CAAC;EAEDO,UAAU,EAAE,MAAOL,EAAU,IAAoB;IAC/C,MAAMnB,GAAG,CAACyB,MAAM,CAAC,UAAUN,EAAE,EAAE,CAAC;EAClC,CAAC;EAED;EACAO,UAAU,EAAE,MAAAA,CACVC,MAAc,EACdC,OAA4B,KACV;IAClB,MAAM5B,GAAG,CAACqB,IAAI,CAAC,UAAUM,MAAM,WAAW,EAAEC,OAAO,CAAC;EACtD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,GAAG,CAACI,YAAY,CAACyB,OAAO,CAACvB,GAAG,CAAEwB,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAAC3B,OAAO,CAAC+B,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAenB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}