{"ast":null,"code":"import React,{createContext,useContext,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const PostContext=/*#__PURE__*/createContext(undefined);export const PostProvider=_ref=>{let{children}=_ref;const[posts,setPosts]=useState([]);const[currentPost,setCurrentPost]=useState(null);const fetchPosts=async()=>{// Here you would make an API call to fetch posts\nconst fetchedPosts=[];// Mock data or from API\nsetPosts(fetchedPosts);};return/*#__PURE__*/_jsx(PostContext.Provider,{value:{posts,currentPost,setCurrentPost,fetchPosts},children:children});};export const usePosts=()=>{const context=useContext(PostContext);if(context===undefined){throw new Error(\"usePosts must be used within a PostProvider\");}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","PostContext","undefined","PostProvider","_ref","children","posts","setPosts","currentPost","setCurrentPost","fetchPosts","fetchedPosts","Provider","value","usePosts","context","Error"],"sources":["C:/Users/akrnuc/code/clonewp/clonewp/frontend/src/context/PostContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from \"react\";\r\n\r\ninterface PostContextType {\r\n  posts: Post[];\r\n  currentPost: Post | null;\r\n  setCurrentPost: (post: Post | null) => void;\r\n  fetchPosts: () => Promise<void>;\r\n}\r\n\r\ninterface Post {\r\n  id: number;\r\n  title: string;\r\n  content: string;\r\n  // Add other post properties as needed\r\n}\r\n\r\nconst PostContext = createContext<PostContextType | undefined>(undefined);\r\n\r\nexport const PostProvider: React.FC<{ children: ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const [posts, setPosts] = useState<Post[]>([]);\r\n  const [currentPost, setCurrentPost] = useState<Post | null>(null);\r\n\r\n  const fetchPosts = async () => {\r\n    // Here you would make an API call to fetch posts\r\n    const fetchedPosts: Post[] = []; // Mock data or from API\r\n    setPosts(fetchedPosts);\r\n  };\r\n\r\n  return (\r\n    <PostContext.Provider\r\n      value={{ posts, currentPost, setCurrentPost, fetchPosts }}\r\n    >\r\n      {children}\r\n    </PostContext.Provider>\r\n  );\r\n};\r\n\r\nexport const usePosts = () => {\r\n  const context = useContext(PostContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"usePosts must be used within a PostProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAgB9E,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAA8BM,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAA+C,CAAGC,IAAA,EAEzD,IAF0D,CAC9DC,QACF,CAAC,CAAAD,IAAA,CACC,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAS,EAAE,CAAC,CAC9C,KAAM,CAACU,WAAW,CAAEC,cAAc,CAAC,CAAGX,QAAQ,CAAc,IAAI,CAAC,CAEjE,KAAM,CAAAY,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B;AACA,KAAM,CAAAC,YAAoB,CAAG,EAAE,CAAE;AACjCJ,QAAQ,CAACI,YAAY,CAAC,CACxB,CAAC,CAED,mBACEX,IAAA,CAACC,WAAW,CAACW,QAAQ,EACnBC,KAAK,CAAE,CAAEP,KAAK,CAAEE,WAAW,CAAEC,cAAc,CAAEC,UAAW,CAAE,CAAAL,QAAA,CAEzDA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAS,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGlB,UAAU,CAACI,WAAW,CAAC,CACvC,GAAIc,OAAO,GAAKb,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAc,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}