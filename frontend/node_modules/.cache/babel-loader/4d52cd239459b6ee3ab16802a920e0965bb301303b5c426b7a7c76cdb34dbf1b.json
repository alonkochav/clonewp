{"ast":null,"code":"import axios from\"axios\";// Adjust the base URL according to your backend server's address\nconst BASE_URL=process.env.REACT_APP_API_URL||\"http://localhost:3000/api\";// Create an axios instance with a base URL\nconst api=axios.create({baseURL:BASE_URL,headers:{\"Content-Type\":\"application/json\"}});// Add a response interceptor to handle global error handling\napi.interceptors.response.use(response=>response,error=>{console.error(\"API Error:\",error);return Promise.reject(error);});export const postService={getAllPosts:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const response=await api.get(\"/posts\",{params:{page,limit}});return response.data;},getPostById:async id=>{const response=await api.get(\"/posts/\".concat(id));return response.data;},createPost:async post=>{const response=await api.post(\"/posts\",post);return response.data;},updatePost:async(id,post)=>{const response=await api.put(\"/posts/\".concat(id),post);return response.data;},deletePost:async id=>{await api.delete(\"/posts/\".concat(id));},// Example for adding a comment to a post\naddComment:async(postId,comment)=>{await api.post(\"/posts/\".concat(postId,\"/comments\"),comment);}};/*\r\nNotes:\r\nEnvironment Variables: The BASE_URL uses an environment variable REACT_APP_API_URL. This should be set in your .env file for different environments.\r\nTyping: TypeScript interfaces (Post and PostResponse) are used to define the shape of the data. Adjust these according to your actual data structures.\r\nAxios: It's assumed that you've installed axios (npm install axios @types/axios). If not, you'll need to do so for this service to work.\r\nError Handling: Basic error logging is implemented via an axios response interceptor. In a production app, you might want more detailed error handling, perhaps dispatching error messages to a global state or showing notifications.\r\nPagination: The getAllPosts function includes pagination parameters. You can adjust this according to your backend's API structure.\r\nAuthentication: If your API requires authentication, you would typically add an authorization header to each request or use axios interceptors to add tokens:\r\n--\r\n*/api.interceptors.request.use(config=>{const token=localStorage.getItem(\"token\");if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});/*\r\n--\r\nService Usage: In your components or hooks, you would import this service and call these methods to interact with your backend:\r\n--\r\nimport postService from './services/postService';\r\n\r\nconst fetchPosts = async () => {\r\n    try {\r\n        const posts = await postService.getAllPosts();\r\n        // Handle posts\r\n    } catch (error) {\r\n        // Handle error\r\n    }\r\n};\r\n--\r\nRemember to handle the asynchronous nature of these calls properly, possibly using React's useEffect hook or custom hooks for fetching data.\r\n*/export default postService;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","response","use","error","console","Promise","reject","postService","getAllPosts","page","arguments","length","undefined","limit","get","params","data","getPostById","id","concat","createPost","post","updatePost","put","deletePost","delete","addComment","postId","comment","request","config","token","localStorage","getItem","Authorization"],"sources":["C:/Users/akrnuc/code/clonewp/clonewp/frontend/src/services/postService.tsx"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\ninterface Post {\r\n  id: number;\r\n  title: string;\r\n  content: string;\r\n  author_id: number;\r\n  category_id?: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface PostResponse {\r\n  data: Post[];\r\n  pagination?: { current_page: number; total_pages: number };\r\n}\r\n\r\n// Adjust the base URL according to your backend server's address\r\nconst BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:3000/api\";\r\n\r\n// Create an axios instance with a base URL\r\nconst api = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Add a response interceptor to handle global error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error(\"API Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const postService = {\r\n  getAllPosts: async (page = 1, limit = 10): Promise<PostResponse> => {\r\n    const response: AxiosResponse<PostResponse> = await api.get(\"/posts\", {\r\n      params: {\r\n        page,\r\n        limit,\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getPostById: async (id: number): Promise<Post> => {\r\n    const response: AxiosResponse<Post> = await api.get(`/posts/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createPost: async (\r\n    post: Omit<Post, \"id\" | \"created_at\" | \"updated_at\">\r\n  ): Promise<Post> => {\r\n    const response: AxiosResponse<Post> = await api.post(\"/posts\", post);\r\n    return response.data;\r\n  },\r\n\r\n  updatePost: async (id: number, post: Partial<Post>): Promise<Post> => {\r\n    const response: AxiosResponse<Post> = await api.put(`/posts/${id}`, post);\r\n    return response.data;\r\n  },\r\n\r\n  deletePost: async (id: number): Promise<void> => {\r\n    await api.delete(`/posts/${id}`);\r\n  },\r\n\r\n  // Example for adding a comment to a post\r\n  addComment: async (\r\n    postId: number,\r\n    comment: { content: string }\r\n  ): Promise<void> => {\r\n    await api.post(`/posts/${postId}/comments`, comment);\r\n  },\r\n};\r\n\r\n/*\r\nNotes:\r\nEnvironment Variables: The BASE_URL uses an environment variable REACT_APP_API_URL. This should be set in your .env file for different environments.\r\nTyping: TypeScript interfaces (Post and PostResponse) are used to define the shape of the data. Adjust these according to your actual data structures.\r\nAxios: It's assumed that you've installed axios (npm install axios @types/axios). If not, you'll need to do so for this service to work.\r\nError Handling: Basic error logging is implemented via an axios response interceptor. In a production app, you might want more detailed error handling, perhaps dispatching error messages to a global state or showing notifications.\r\nPagination: The getAllPosts function includes pagination parameters. You can adjust this according to your backend's API structure.\r\nAuthentication: If your API requires authentication, you would typically add an authorization header to each request or use axios interceptors to add tokens:\r\n--\r\n*/\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n/*\r\n--\r\nService Usage: In your components or hooks, you would import this service and call these methods to interact with your backend:\r\n--\r\nimport postService from './services/postService';\r\n\r\nconst fetchPosts = async () => {\r\n    try {\r\n        const posts = await postService.getAllPosts();\r\n        // Handle posts\r\n    } catch (error) {\r\n        // Handle error\r\n    }\r\n};\r\n--\r\nRemember to handle the asynchronous nature of these calls properly, possibly using React's useEffect hook or custom hooks for fetching data.\r\n*/\r\n\r\nexport default postService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}